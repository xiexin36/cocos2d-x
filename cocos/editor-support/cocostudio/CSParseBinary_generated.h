// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CSPARSEBINARY_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CSPARSEBINARY_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"


namespace flatbuffers {

struct CSParseBinary;
struct NodeTree;
struct Options;
struct WidgetOptions;
struct SingleNodeOptions;
struct SpriteOptions;
struct ParticleSystemOptions;
struct TMXTiledMapOptions;
struct ButtonOptions;
struct CheckBoxOptions;
struct ImageViewOptions;
struct TextAtlasOptions;
struct TextBMFontOptions;
struct TextOptions;
struct TextFieldOptions;
struct LoadingBarOptions;
struct SliderOptions;
struct PanelOptions;
struct ScrollViewOptions;
struct PageViewOptions;
struct ListViewOptions;
struct ProjectNodeOptions;
struct ComponentOptions;
struct ComAudioOptions;
struct NodeAction;
struct TimeLine;
struct Frame;
struct TimeLineBoolFrame;
struct TimeLineIntFrame;
struct TimeLineStringFrame;
struct TimeLinePointFrame;
struct TimeLineColorFrame;
struct TimeLineTextureFrame;
struct RotationSkew;
struct Position;
struct Scale;
struct AnchorPoint;
struct Color;
struct ColorVector;
struct FlatSize;
struct CapInsets;
struct ResourceData;

MANUALLY_ALIGNED_STRUCT(4) RotationSkew {
 private:
  float rotationSkewX_;
  float rotationSkewY_;

 public:
  RotationSkew(float rotationSkewX, float rotationSkewY)
    : rotationSkewX_(flatbuffers::EndianScalar(rotationSkewX)), rotationSkewY_(flatbuffers::EndianScalar(rotationSkewY)) { }

  float rotationSkewX() const { return flatbuffers::EndianScalar(rotationSkewX_); }
  float rotationSkewY() const { return flatbuffers::EndianScalar(rotationSkewY_); }
};
STRUCT_END(RotationSkew, 8);

MANUALLY_ALIGNED_STRUCT(4) Position {
 private:
  float x_;
  float y_;

 public:
  Position(float x, float y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(Position, 8);

MANUALLY_ALIGNED_STRUCT(4) Scale {
 private:
  float scaleX_;
  float scaleY_;

 public:
  Scale(float scaleX, float scaleY)
    : scaleX_(flatbuffers::EndianScalar(scaleX)), scaleY_(flatbuffers::EndianScalar(scaleY)) { }

  float scaleX() const { return flatbuffers::EndianScalar(scaleX_); }
  float scaleY() const { return flatbuffers::EndianScalar(scaleY_); }
};
STRUCT_END(Scale, 8);

MANUALLY_ALIGNED_STRUCT(4) AnchorPoint {
 private:
  float scaleX_;
  float scaleY_;

 public:
  AnchorPoint(float scaleX, float scaleY)
    : scaleX_(flatbuffers::EndianScalar(scaleX)), scaleY_(flatbuffers::EndianScalar(scaleY)) { }

  float scaleX() const { return flatbuffers::EndianScalar(scaleX_); }
  float scaleY() const { return flatbuffers::EndianScalar(scaleY_); }
};
STRUCT_END(AnchorPoint, 8);

MANUALLY_ALIGNED_STRUCT(1) Color {
 private:
  uint8_t a_;
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;

 public:
  Color(uint8_t a, uint8_t r, uint8_t g, uint8_t b)
    : a_(flatbuffers::EndianScalar(a)), r_(flatbuffers::EndianScalar(r)), g_(flatbuffers::EndianScalar(g)), b_(flatbuffers::EndianScalar(b)) { }

  uint8_t a() const { return flatbuffers::EndianScalar(a_); }
  uint8_t r() const { return flatbuffers::EndianScalar(r_); }
  uint8_t g() const { return flatbuffers::EndianScalar(g_); }
  uint8_t b() const { return flatbuffers::EndianScalar(b_); }
};
STRUCT_END(Color, 4);

MANUALLY_ALIGNED_STRUCT(4) ColorVector {
 private:
  float vectorX_;
  float vectorY_;

 public:
  ColorVector(float vectorX, float vectorY)
    : vectorX_(flatbuffers::EndianScalar(vectorX)), vectorY_(flatbuffers::EndianScalar(vectorY)) { }

  float vectorX() const { return flatbuffers::EndianScalar(vectorX_); }
  float vectorY() const { return flatbuffers::EndianScalar(vectorY_); }
};
STRUCT_END(ColorVector, 8);

MANUALLY_ALIGNED_STRUCT(4) FlatSize {
 private:
  float width_;
  float height_;

 public:
  FlatSize(float width, float height)
    : width_(flatbuffers::EndianScalar(width)), height_(flatbuffers::EndianScalar(height)) { }

  float width() const { return flatbuffers::EndianScalar(width_); }
  float height() const { return flatbuffers::EndianScalar(height_); }
};
STRUCT_END(FlatSize, 8);

MANUALLY_ALIGNED_STRUCT(4) CapInsets {
 private:
  float x_;
  float y_;
  float width_;
  float height_;

 public:
  CapInsets(float x, float y, float width, float height)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), width_(flatbuffers::EndianScalar(width)), height_(flatbuffers::EndianScalar(height)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float width() const { return flatbuffers::EndianScalar(width_); }
  float height() const { return flatbuffers::EndianScalar(height_); }
};
STRUCT_END(CapInsets, 16);

struct CSParseBinary : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *textures() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *texturePngs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(6); }
  const NodeTree *nodeTree() const { return GetPointer<const NodeTree *>(8); }
  const NodeAction *action() const { return GetPointer<const NodeAction *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* textures */) &&
           verifier.Verify(textures()) &&
           verifier.VerifyVectorOfStrings(textures()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* texturePngs */) &&
           verifier.Verify(texturePngs()) &&
           verifier.VerifyVectorOfStrings(texturePngs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* nodeTree */) &&
           verifier.VerifyTable(nodeTree()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* action */) &&
           verifier.VerifyTable(action()) &&
           verifier.EndTable();
  }
};

struct CSParseBinaryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> textures) { fbb_.AddOffset(4, textures); }
  void add_texturePngs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> texturePngs) { fbb_.AddOffset(6, texturePngs); }
  void add_nodeTree(flatbuffers::Offset<NodeTree> nodeTree) { fbb_.AddOffset(8, nodeTree); }
  void add_action(flatbuffers::Offset<NodeAction> action) { fbb_.AddOffset(10, action); }
  CSParseBinaryBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CSParseBinaryBuilder &operator=(const CSParseBinaryBuilder &);
  flatbuffers::Offset<CSParseBinary> Finish() {
    auto o = flatbuffers::Offset<CSParseBinary>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<CSParseBinary> CreateCSParseBinary(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> textures = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> texturePngs = 0,
   flatbuffers::Offset<NodeTree> nodeTree = 0,
   flatbuffers::Offset<NodeAction> action = 0) {
  CSParseBinaryBuilder builder_(_fbb);
  builder_.add_action(action);
  builder_.add_nodeTree(nodeTree);
  builder_.add_texturePngs(texturePngs);
  builder_.add_textures(textures);
  return builder_.Finish();
}

struct NodeTree : private flatbuffers::Table {
  const flatbuffers::String *classname() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<NodeTree>> *children() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NodeTree>> *>(6); }
  const Options *options() const { return GetPointer<const Options *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* classname */) &&
           verifier.Verify(classname()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* children */) &&
           verifier.Verify(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* options */) &&
           verifier.VerifyTable(options()) &&
           verifier.EndTable();
  }
};

struct NodeTreeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_classname(flatbuffers::Offset<flatbuffers::String> classname) { fbb_.AddOffset(4, classname); }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeTree>>> children) { fbb_.AddOffset(6, children); }
  void add_options(flatbuffers::Offset<Options> options) { fbb_.AddOffset(8, options); }
  NodeTreeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NodeTreeBuilder &operator=(const NodeTreeBuilder &);
  flatbuffers::Offset<NodeTree> Finish() {
    auto o = flatbuffers::Offset<NodeTree>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<NodeTree> CreateNodeTree(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> classname = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeTree>>> children = 0,
   flatbuffers::Offset<Options> options = 0) {
  NodeTreeBuilder builder_(_fbb);
  builder_.add_options(options);
  builder_.add_children(children);
  builder_.add_classname(classname);
  return builder_.Finish();
}

struct Options : private flatbuffers::Table {
  const WidgetOptions *widgetOptions() const { return GetPointer<const WidgetOptions *>(4); }
  const SingleNodeOptions *singleNodeOptions() const { return GetPointer<const SingleNodeOptions *>(6); }
  const SpriteOptions *spriteOptions() const { return GetPointer<const SpriteOptions *>(8); }
  const ParticleSystemOptions *particleSystemOptions() const { return GetPointer<const ParticleSystemOptions *>(10); }
  const TMXTiledMapOptions *tmxTiledMapOptions() const { return GetPointer<const TMXTiledMapOptions *>(12); }
  const ButtonOptions *buttonOptions() const { return GetPointer<const ButtonOptions *>(14); }
  const CheckBoxOptions *checkBoxOptions() const { return GetPointer<const CheckBoxOptions *>(16); }
  const ImageViewOptions *imageViewOptions() const { return GetPointer<const ImageViewOptions *>(18); }
  const TextBMFontOptions *textBMFontOptions() const { return GetPointer<const TextBMFontOptions *>(20); }
  const TextOptions *textOptions() const { return GetPointer<const TextOptions *>(22); }
  const TextFieldOptions *textFieldOptions() const { return GetPointer<const TextFieldOptions *>(24); }
  const LoadingBarOptions *loadingBarOptions() const { return GetPointer<const LoadingBarOptions *>(26); }
  const SliderOptions *sliderOptions() const { return GetPointer<const SliderOptions *>(28); }
  const PanelOptions *panelOptions() const { return GetPointer<const PanelOptions *>(30); }
  const ScrollViewOptions *scrollViewOptions() const { return GetPointer<const ScrollViewOptions *>(32); }
  const PageViewOptions *pageViewOptions() const { return GetPointer<const PageViewOptions *>(34); }
  const ListViewOptions *listViewOptions() const { return GetPointer<const ListViewOptions *>(36); }
  const ProjectNodeOptions *projectNodeOptions() const { return GetPointer<const ProjectNodeOptions *>(38); }
  const ComponentOptions *componentOptions() const { return GetPointer<const ComponentOptions *>(40); }
  const TextAtlasOptions *textAtlasOptions() const { return GetPointer<const TextAtlasOptions *>(42); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* widgetOptions */) &&
           verifier.VerifyTable(widgetOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* singleNodeOptions */) &&
           verifier.VerifyTable(singleNodeOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* spriteOptions */) &&
           verifier.VerifyTable(spriteOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* particleSystemOptions */) &&
           verifier.VerifyTable(particleSystemOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* tmxTiledMapOptions */) &&
           verifier.VerifyTable(tmxTiledMapOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* buttonOptions */) &&
           verifier.VerifyTable(buttonOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* checkBoxOptions */) &&
           verifier.VerifyTable(checkBoxOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* imageViewOptions */) &&
           verifier.VerifyTable(imageViewOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* textBMFontOptions */) &&
           verifier.VerifyTable(textBMFontOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* textOptions */) &&
           verifier.VerifyTable(textOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 24 /* textFieldOptions */) &&
           verifier.VerifyTable(textFieldOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 26 /* loadingBarOptions */) &&
           verifier.VerifyTable(loadingBarOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* sliderOptions */) &&
           verifier.VerifyTable(sliderOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 30 /* panelOptions */) &&
           verifier.VerifyTable(panelOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 32 /* scrollViewOptions */) &&
           verifier.VerifyTable(scrollViewOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 34 /* pageViewOptions */) &&
           verifier.VerifyTable(pageViewOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 36 /* listViewOptions */) &&
           verifier.VerifyTable(listViewOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 38 /* projectNodeOptions */) &&
           verifier.VerifyTable(projectNodeOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 40 /* componentOptions */) &&
           verifier.VerifyTable(componentOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 42 /* textAtlasOptions */) &&
           verifier.VerifyTable(textAtlasOptions()) &&
           verifier.EndTable();
  }
};

struct OptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_widgetOptions(flatbuffers::Offset<WidgetOptions> widgetOptions) { fbb_.AddOffset(4, widgetOptions); }
  void add_singleNodeOptions(flatbuffers::Offset<SingleNodeOptions> singleNodeOptions) { fbb_.AddOffset(6, singleNodeOptions); }
  void add_spriteOptions(flatbuffers::Offset<SpriteOptions> spriteOptions) { fbb_.AddOffset(8, spriteOptions); }
  void add_particleSystemOptions(flatbuffers::Offset<ParticleSystemOptions> particleSystemOptions) { fbb_.AddOffset(10, particleSystemOptions); }
  void add_tmxTiledMapOptions(flatbuffers::Offset<TMXTiledMapOptions> tmxTiledMapOptions) { fbb_.AddOffset(12, tmxTiledMapOptions); }
  void add_buttonOptions(flatbuffers::Offset<ButtonOptions> buttonOptions) { fbb_.AddOffset(14, buttonOptions); }
  void add_checkBoxOptions(flatbuffers::Offset<CheckBoxOptions> checkBoxOptions) { fbb_.AddOffset(16, checkBoxOptions); }
  void add_imageViewOptions(flatbuffers::Offset<ImageViewOptions> imageViewOptions) { fbb_.AddOffset(18, imageViewOptions); }
  void add_textBMFontOptions(flatbuffers::Offset<TextBMFontOptions> textBMFontOptions) { fbb_.AddOffset(20, textBMFontOptions); }
  void add_textOptions(flatbuffers::Offset<TextOptions> textOptions) { fbb_.AddOffset(22, textOptions); }
  void add_textFieldOptions(flatbuffers::Offset<TextFieldOptions> textFieldOptions) { fbb_.AddOffset(24, textFieldOptions); }
  void add_loadingBarOptions(flatbuffers::Offset<LoadingBarOptions> loadingBarOptions) { fbb_.AddOffset(26, loadingBarOptions); }
  void add_sliderOptions(flatbuffers::Offset<SliderOptions> sliderOptions) { fbb_.AddOffset(28, sliderOptions); }
  void add_panelOptions(flatbuffers::Offset<PanelOptions> panelOptions) { fbb_.AddOffset(30, panelOptions); }
  void add_scrollViewOptions(flatbuffers::Offset<ScrollViewOptions> scrollViewOptions) { fbb_.AddOffset(32, scrollViewOptions); }
  void add_pageViewOptions(flatbuffers::Offset<PageViewOptions> pageViewOptions) { fbb_.AddOffset(34, pageViewOptions); }
  void add_listViewOptions(flatbuffers::Offset<ListViewOptions> listViewOptions) { fbb_.AddOffset(36, listViewOptions); }
  void add_projectNodeOptions(flatbuffers::Offset<ProjectNodeOptions> projectNodeOptions) { fbb_.AddOffset(38, projectNodeOptions); }
  void add_componentOptions(flatbuffers::Offset<ComponentOptions> componentOptions) { fbb_.AddOffset(40, componentOptions); }
  void add_textAtlasOptions(flatbuffers::Offset<TextAtlasOptions> textAtlasOptions) { fbb_.AddOffset(42, textAtlasOptions); }
  OptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  OptionsBuilder &operator=(const OptionsBuilder &);
  flatbuffers::Offset<Options> Finish() {
    auto o = flatbuffers::Offset<Options>(fbb_.EndTable(start_, 20));
    return o;
  }
};

inline flatbuffers::Offset<Options> CreateOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<WidgetOptions> widgetOptions = 0,
   flatbuffers::Offset<SingleNodeOptions> singleNodeOptions = 0,
   flatbuffers::Offset<SpriteOptions> spriteOptions = 0,
   flatbuffers::Offset<ParticleSystemOptions> particleSystemOptions = 0,
   flatbuffers::Offset<TMXTiledMapOptions> tmxTiledMapOptions = 0,
   flatbuffers::Offset<ButtonOptions> buttonOptions = 0,
   flatbuffers::Offset<CheckBoxOptions> checkBoxOptions = 0,
   flatbuffers::Offset<ImageViewOptions> imageViewOptions = 0,
   flatbuffers::Offset<TextBMFontOptions> textBMFontOptions = 0,
   flatbuffers::Offset<TextOptions> textOptions = 0,
   flatbuffers::Offset<TextFieldOptions> textFieldOptions = 0,
   flatbuffers::Offset<LoadingBarOptions> loadingBarOptions = 0,
   flatbuffers::Offset<SliderOptions> sliderOptions = 0,
   flatbuffers::Offset<PanelOptions> panelOptions = 0,
   flatbuffers::Offset<ScrollViewOptions> scrollViewOptions = 0,
   flatbuffers::Offset<PageViewOptions> pageViewOptions = 0,
   flatbuffers::Offset<ListViewOptions> listViewOptions = 0,
   flatbuffers::Offset<ProjectNodeOptions> projectNodeOptions = 0,
   flatbuffers::Offset<ComponentOptions> componentOptions = 0,
   flatbuffers::Offset<TextAtlasOptions> textAtlasOptions = 0) {
  OptionsBuilder builder_(_fbb);
  builder_.add_textAtlasOptions(textAtlasOptions);
  builder_.add_componentOptions(componentOptions);
  builder_.add_projectNodeOptions(projectNodeOptions);
  builder_.add_listViewOptions(listViewOptions);
  builder_.add_pageViewOptions(pageViewOptions);
  builder_.add_scrollViewOptions(scrollViewOptions);
  builder_.add_panelOptions(panelOptions);
  builder_.add_sliderOptions(sliderOptions);
  builder_.add_loadingBarOptions(loadingBarOptions);
  builder_.add_textFieldOptions(textFieldOptions);
  builder_.add_textOptions(textOptions);
  builder_.add_textBMFontOptions(textBMFontOptions);
  builder_.add_imageViewOptions(imageViewOptions);
  builder_.add_checkBoxOptions(checkBoxOptions);
  builder_.add_buttonOptions(buttonOptions);
  builder_.add_tmxTiledMapOptions(tmxTiledMapOptions);
  builder_.add_particleSystemOptions(particleSystemOptions);
  builder_.add_spriteOptions(spriteOptions);
  builder_.add_singleNodeOptions(singleNodeOptions);
  builder_.add_widgetOptions(widgetOptions);
  return builder_.Finish();
}

struct WidgetOptions : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t actionTag() const { return GetField<int32_t>(6, 0); }
  const RotationSkew *rotationSkew() const { return GetStruct<const RotationSkew *>(8); }
  int32_t zOrder() const { return GetField<int32_t>(10, 0); }
  uint8_t visible() const { return GetField<uint8_t>(12, 1); }
  uint8_t alpha() const { return GetField<uint8_t>(14, 255); }
  int32_t tag() const { return GetField<int32_t>(16, 0); }
  const Position *position() const { return GetStruct<const Position *>(18); }
  const Scale *scale() const { return GetStruct<const Scale *>(20); }
  const AnchorPoint *anchorPoint() const { return GetStruct<const AnchorPoint *>(22); }
  const Color *color() const { return GetStruct<const Color *>(24); }
  const FlatSize *size() const { return GetStruct<const FlatSize *>(26); }
  uint8_t flipX() const { return GetField<uint8_t>(28, 0); }
  uint8_t flipY() const { return GetField<uint8_t>(30, 0); }
  uint8_t ignoreSize() const { return GetField<uint8_t>(32, 0); }
  uint8_t touchEnabled() const { return GetField<uint8_t>(34, 0); }
  const flatbuffers::String *frameEvent() const { return GetPointer<const flatbuffers::String *>(36); }
  const flatbuffers::String *customProperty() const { return GetPointer<const flatbuffers::String *>(38); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, 6 /* actionTag */) &&
           VerifyField<RotationSkew>(verifier, 8 /* rotationSkew */) &&
           VerifyField<int32_t>(verifier, 10 /* zOrder */) &&
           VerifyField<uint8_t>(verifier, 12 /* visible */) &&
           VerifyField<uint8_t>(verifier, 14 /* alpha */) &&
           VerifyField<int32_t>(verifier, 16 /* tag */) &&
           VerifyField<Position>(verifier, 18 /* position */) &&
           VerifyField<Scale>(verifier, 20 /* scale */) &&
           VerifyField<AnchorPoint>(verifier, 22 /* anchorPoint */) &&
           VerifyField<Color>(verifier, 24 /* color */) &&
           VerifyField<FlatSize>(verifier, 26 /* size */) &&
           VerifyField<uint8_t>(verifier, 28 /* flipX */) &&
           VerifyField<uint8_t>(verifier, 30 /* flipY */) &&
           VerifyField<uint8_t>(verifier, 32 /* ignoreSize */) &&
           VerifyField<uint8_t>(verifier, 34 /* touchEnabled */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 36 /* frameEvent */) &&
           verifier.Verify(frameEvent()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 38 /* customProperty */) &&
           verifier.Verify(customProperty()) &&
           verifier.EndTable();
  }
};

struct WidgetOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_actionTag(int32_t actionTag) { fbb_.AddElement<int32_t>(6, actionTag, 0); }
  void add_rotationSkew(const RotationSkew *rotationSkew) { fbb_.AddStruct(8, rotationSkew); }
  void add_zOrder(int32_t zOrder) { fbb_.AddElement<int32_t>(10, zOrder, 0); }
  void add_visible(uint8_t visible) { fbb_.AddElement<uint8_t>(12, visible, 1); }
  void add_alpha(uint8_t alpha) { fbb_.AddElement<uint8_t>(14, alpha, 255); }
  void add_tag(int32_t tag) { fbb_.AddElement<int32_t>(16, tag, 0); }
  void add_position(const Position *position) { fbb_.AddStruct(18, position); }
  void add_scale(const Scale *scale) { fbb_.AddStruct(20, scale); }
  void add_anchorPoint(const AnchorPoint *anchorPoint) { fbb_.AddStruct(22, anchorPoint); }
  void add_color(const Color *color) { fbb_.AddStruct(24, color); }
  void add_size(const FlatSize *size) { fbb_.AddStruct(26, size); }
  void add_flipX(uint8_t flipX) { fbb_.AddElement<uint8_t>(28, flipX, 0); }
  void add_flipY(uint8_t flipY) { fbb_.AddElement<uint8_t>(30, flipY, 0); }
  void add_ignoreSize(uint8_t ignoreSize) { fbb_.AddElement<uint8_t>(32, ignoreSize, 0); }
  void add_touchEnabled(uint8_t touchEnabled) { fbb_.AddElement<uint8_t>(34, touchEnabled, 0); }
  void add_frameEvent(flatbuffers::Offset<flatbuffers::String> frameEvent) { fbb_.AddOffset(36, frameEvent); }
  void add_customProperty(flatbuffers::Offset<flatbuffers::String> customProperty) { fbb_.AddOffset(38, customProperty); }
  WidgetOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WidgetOptionsBuilder &operator=(const WidgetOptionsBuilder &);
  flatbuffers::Offset<WidgetOptions> Finish() {
    auto o = flatbuffers::Offset<WidgetOptions>(fbb_.EndTable(start_, 18));
    return o;
  }
};

inline flatbuffers::Offset<WidgetOptions> CreateWidgetOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int32_t actionTag = 0,
   const RotationSkew *rotationSkew = 0,
   int32_t zOrder = 0,
   uint8_t visible = 1,
   uint8_t alpha = 255,
   int32_t tag = 0,
   const Position *position = 0,
   const Scale *scale = 0,
   const AnchorPoint *anchorPoint = 0,
   const Color *color = 0,
   const FlatSize *size = 0,
   uint8_t flipX = 0,
   uint8_t flipY = 0,
   uint8_t ignoreSize = 0,
   uint8_t touchEnabled = 0,
   flatbuffers::Offset<flatbuffers::String> frameEvent = 0,
   flatbuffers::Offset<flatbuffers::String> customProperty = 0) {
  WidgetOptionsBuilder builder_(_fbb);
  builder_.add_customProperty(customProperty);
  builder_.add_frameEvent(frameEvent);
  builder_.add_size(size);
  builder_.add_color(color);
  builder_.add_anchorPoint(anchorPoint);
  builder_.add_scale(scale);
  builder_.add_position(position);
  builder_.add_tag(tag);
  builder_.add_zOrder(zOrder);
  builder_.add_rotationSkew(rotationSkew);
  builder_.add_actionTag(actionTag);
  builder_.add_name(name);
  builder_.add_touchEnabled(touchEnabled);
  builder_.add_ignoreSize(ignoreSize);
  builder_.add_flipY(flipY);
  builder_.add_flipX(flipX);
  builder_.add_alpha(alpha);
  builder_.add_visible(visible);
  return builder_.Finish();
}

struct SingleNodeOptions : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SingleNodeOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  SingleNodeOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SingleNodeOptionsBuilder &operator=(const SingleNodeOptionsBuilder &);
  flatbuffers::Offset<SingleNodeOptions> Finish() {
    auto o = flatbuffers::Offset<SingleNodeOptions>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<SingleNodeOptions> CreateSingleNodeOptions(flatbuffers::FlatBufferBuilder &_fbb) {
  SingleNodeOptionsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SpriteOptions : private flatbuffers::Table {
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           verifier.EndTable();
  }
};

struct SpriteOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(4, fileNameData); }
  SpriteOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SpriteOptionsBuilder &operator=(const SpriteOptionsBuilder &);
  flatbuffers::Offset<SpriteOptions> Finish() {
    auto o = flatbuffers::Offset<SpriteOptions>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SpriteOptions> CreateSpriteOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fileNameData = 0) {
  SpriteOptionsBuilder builder_(_fbb);
  builder_.add_fileNameData(fileNameData);
  return builder_.Finish();
}

struct ParticleSystemOptions : private flatbuffers::Table {
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           verifier.EndTable();
  }
};

struct ParticleSystemOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(4, fileNameData); }
  ParticleSystemOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ParticleSystemOptionsBuilder &operator=(const ParticleSystemOptionsBuilder &);
  flatbuffers::Offset<ParticleSystemOptions> Finish() {
    auto o = flatbuffers::Offset<ParticleSystemOptions>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ParticleSystemOptions> CreateParticleSystemOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fileNameData = 0) {
  ParticleSystemOptionsBuilder builder_(_fbb);
  builder_.add_fileNameData(fileNameData);
  return builder_.Finish();
}

struct TMXTiledMapOptions : private flatbuffers::Table {
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           verifier.EndTable();
  }
};

struct TMXTiledMapOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(4, fileNameData); }
  TMXTiledMapOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TMXTiledMapOptionsBuilder &operator=(const TMXTiledMapOptionsBuilder &);
  flatbuffers::Offset<TMXTiledMapOptions> Finish() {
    auto o = flatbuffers::Offset<TMXTiledMapOptions>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TMXTiledMapOptions> CreateTMXTiledMapOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fileNameData = 0) {
  TMXTiledMapOptionsBuilder builder_(_fbb);
  builder_.add_fileNameData(fileNameData);
  return builder_.Finish();
}

struct ButtonOptions : private flatbuffers::Table {
  const ResourceData *normalData() const { return GetPointer<const ResourceData *>(4); }
  const ResourceData *pressedData() const { return GetPointer<const ResourceData *>(6); }
  const ResourceData *disabledData() const { return GetPointer<const ResourceData *>(8); }
  const ResourceData *fontResource() const { return GetPointer<const ResourceData *>(10); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *fontName() const { return GetPointer<const flatbuffers::String *>(14); }
  int32_t fontSize() const { return GetField<int32_t>(16, 0); }
  const Color *textColor() const { return GetStruct<const Color *>(18); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(20); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(22); }
  uint8_t scale9Enabled() const { return GetField<uint8_t>(24, 0); }
  uint8_t displaystate() const { return GetField<uint8_t>(26, 1); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* normalData */) &&
           verifier.VerifyTable(normalData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* pressedData */) &&
           verifier.VerifyTable(pressedData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* disabledData */) &&
           verifier.VerifyTable(disabledData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* fontResource */) &&
           verifier.VerifyTable(fontResource()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* text */) &&
           verifier.Verify(text()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* fontName */) &&
           verifier.Verify(fontName()) &&
           VerifyField<int32_t>(verifier, 16 /* fontSize */) &&
           VerifyField<Color>(verifier, 18 /* textColor */) &&
           VerifyField<CapInsets>(verifier, 20 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 22 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 24 /* scale9Enabled */) &&
           VerifyField<uint8_t>(verifier, 26 /* displaystate */) &&
           verifier.EndTable();
  }
};

struct ButtonOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_normalData(flatbuffers::Offset<ResourceData> normalData) { fbb_.AddOffset(4, normalData); }
  void add_pressedData(flatbuffers::Offset<ResourceData> pressedData) { fbb_.AddOffset(6, pressedData); }
  void add_disabledData(flatbuffers::Offset<ResourceData> disabledData) { fbb_.AddOffset(8, disabledData); }
  void add_fontResource(flatbuffers::Offset<ResourceData> fontResource) { fbb_.AddOffset(10, fontResource); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(12, text); }
  void add_fontName(flatbuffers::Offset<flatbuffers::String> fontName) { fbb_.AddOffset(14, fontName); }
  void add_fontSize(int32_t fontSize) { fbb_.AddElement<int32_t>(16, fontSize, 0); }
  void add_textColor(const Color *textColor) { fbb_.AddStruct(18, textColor); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(20, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(22, scale9Size); }
  void add_scale9Enabled(uint8_t scale9Enabled) { fbb_.AddElement<uint8_t>(24, scale9Enabled, 0); }
  void add_displaystate(uint8_t displaystate) { fbb_.AddElement<uint8_t>(26, displaystate, 1); }
  ButtonOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ButtonOptionsBuilder &operator=(const ButtonOptionsBuilder &);
  flatbuffers::Offset<ButtonOptions> Finish() {
    auto o = flatbuffers::Offset<ButtonOptions>(fbb_.EndTable(start_, 12));
    return o;
  }
};

inline flatbuffers::Offset<ButtonOptions> CreateButtonOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> normalData = 0,
   flatbuffers::Offset<ResourceData> pressedData = 0,
   flatbuffers::Offset<ResourceData> disabledData = 0,
   flatbuffers::Offset<ResourceData> fontResource = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0,
   flatbuffers::Offset<flatbuffers::String> fontName = 0,
   int32_t fontSize = 0,
   const Color *textColor = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t scale9Enabled = 0,
   uint8_t displaystate = 1) {
  ButtonOptionsBuilder builder_(_fbb);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_textColor(textColor);
  builder_.add_fontSize(fontSize);
  builder_.add_fontName(fontName);
  builder_.add_text(text);
  builder_.add_fontResource(fontResource);
  builder_.add_disabledData(disabledData);
  builder_.add_pressedData(pressedData);
  builder_.add_normalData(normalData);
  builder_.add_displaystate(displaystate);
  builder_.add_scale9Enabled(scale9Enabled);
  return builder_.Finish();
}

struct CheckBoxOptions : private flatbuffers::Table {
  const ResourceData *backGroundBoxData() const { return GetPointer<const ResourceData *>(4); }
  const ResourceData *backGroundBoxSelectedData() const { return GetPointer<const ResourceData *>(6); }
  const ResourceData *frontCrossData() const { return GetPointer<const ResourceData *>(8); }
  const ResourceData *backGroundBoxDisabledData() const { return GetPointer<const ResourceData *>(10); }
  const ResourceData *frontCrossDisabledData() const { return GetPointer<const ResourceData *>(12); }
  uint8_t selectedState() const { return GetField<uint8_t>(14, 1); }
  uint8_t displaystate() const { return GetField<uint8_t>(16, 1); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* backGroundBoxData */) &&
           verifier.VerifyTable(backGroundBoxData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* backGroundBoxSelectedData */) &&
           verifier.VerifyTable(backGroundBoxSelectedData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* frontCrossData */) &&
           verifier.VerifyTable(frontCrossData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* backGroundBoxDisabledData */) &&
           verifier.VerifyTable(backGroundBoxDisabledData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* frontCrossDisabledData */) &&
           verifier.VerifyTable(frontCrossDisabledData()) &&
           VerifyField<uint8_t>(verifier, 14 /* selectedState */) &&
           VerifyField<uint8_t>(verifier, 16 /* displaystate */) &&
           verifier.EndTable();
  }
};

struct CheckBoxOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_backGroundBoxData(flatbuffers::Offset<ResourceData> backGroundBoxData) { fbb_.AddOffset(4, backGroundBoxData); }
  void add_backGroundBoxSelectedData(flatbuffers::Offset<ResourceData> backGroundBoxSelectedData) { fbb_.AddOffset(6, backGroundBoxSelectedData); }
  void add_frontCrossData(flatbuffers::Offset<ResourceData> frontCrossData) { fbb_.AddOffset(8, frontCrossData); }
  void add_backGroundBoxDisabledData(flatbuffers::Offset<ResourceData> backGroundBoxDisabledData) { fbb_.AddOffset(10, backGroundBoxDisabledData); }
  void add_frontCrossDisabledData(flatbuffers::Offset<ResourceData> frontCrossDisabledData) { fbb_.AddOffset(12, frontCrossDisabledData); }
  void add_selectedState(uint8_t selectedState) { fbb_.AddElement<uint8_t>(14, selectedState, 1); }
  void add_displaystate(uint8_t displaystate) { fbb_.AddElement<uint8_t>(16, displaystate, 1); }
  CheckBoxOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CheckBoxOptionsBuilder &operator=(const CheckBoxOptionsBuilder &);
  flatbuffers::Offset<CheckBoxOptions> Finish() {
    auto o = flatbuffers::Offset<CheckBoxOptions>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<CheckBoxOptions> CreateCheckBoxOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> backGroundBoxData = 0,
   flatbuffers::Offset<ResourceData> backGroundBoxSelectedData = 0,
   flatbuffers::Offset<ResourceData> frontCrossData = 0,
   flatbuffers::Offset<ResourceData> backGroundBoxDisabledData = 0,
   flatbuffers::Offset<ResourceData> frontCrossDisabledData = 0,
   uint8_t selectedState = 1,
   uint8_t displaystate = 1) {
  CheckBoxOptionsBuilder builder_(_fbb);
  builder_.add_frontCrossDisabledData(frontCrossDisabledData);
  builder_.add_backGroundBoxDisabledData(backGroundBoxDisabledData);
  builder_.add_frontCrossData(frontCrossData);
  builder_.add_backGroundBoxSelectedData(backGroundBoxSelectedData);
  builder_.add_backGroundBoxData(backGroundBoxData);
  builder_.add_displaystate(displaystate);
  builder_.add_selectedState(selectedState);
  return builder_.Finish();
}

struct ImageViewOptions : private flatbuffers::Table {
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(4); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(6); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(8); }
  uint8_t scale9Enabled() const { return GetField<uint8_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           VerifyField<CapInsets>(verifier, 6 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 8 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 10 /* scale9Enabled */) &&
           verifier.EndTable();
  }
};

struct ImageViewOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(4, fileNameData); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(6, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(8, scale9Size); }
  void add_scale9Enabled(uint8_t scale9Enabled) { fbb_.AddElement<uint8_t>(10, scale9Enabled, 0); }
  ImageViewOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ImageViewOptionsBuilder &operator=(const ImageViewOptionsBuilder &);
  flatbuffers::Offset<ImageViewOptions> Finish() {
    auto o = flatbuffers::Offset<ImageViewOptions>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ImageViewOptions> CreateImageViewOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fileNameData = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t scale9Enabled = 0) {
  ImageViewOptionsBuilder builder_(_fbb);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_fileNameData(fileNameData);
  builder_.add_scale9Enabled(scale9Enabled);
  return builder_.Finish();
}

struct TextAtlasOptions : private flatbuffers::Table {
  const ResourceData *charMapFileData() const { return GetPointer<const ResourceData *>(4); }
  const flatbuffers::String *stringValue() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *startCharMap() const { return GetPointer<const flatbuffers::String *>(8); }
  int32_t itemWidth() const { return GetField<int32_t>(10, 0); }
  int32_t itemHeight() const { return GetField<int32_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* charMapFileData */) &&
           verifier.VerifyTable(charMapFileData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* stringValue */) &&
           verifier.Verify(stringValue()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* startCharMap */) &&
           verifier.Verify(startCharMap()) &&
           VerifyField<int32_t>(verifier, 10 /* itemWidth */) &&
           VerifyField<int32_t>(verifier, 12 /* itemHeight */) &&
           verifier.EndTable();
  }
};

struct TextAtlasOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charMapFileData(flatbuffers::Offset<ResourceData> charMapFileData) { fbb_.AddOffset(4, charMapFileData); }
  void add_stringValue(flatbuffers::Offset<flatbuffers::String> stringValue) { fbb_.AddOffset(6, stringValue); }
  void add_startCharMap(flatbuffers::Offset<flatbuffers::String> startCharMap) { fbb_.AddOffset(8, startCharMap); }
  void add_itemWidth(int32_t itemWidth) { fbb_.AddElement<int32_t>(10, itemWidth, 0); }
  void add_itemHeight(int32_t itemHeight) { fbb_.AddElement<int32_t>(12, itemHeight, 0); }
  TextAtlasOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextAtlasOptionsBuilder &operator=(const TextAtlasOptionsBuilder &);
  flatbuffers::Offset<TextAtlasOptions> Finish() {
    auto o = flatbuffers::Offset<TextAtlasOptions>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<TextAtlasOptions> CreateTextAtlasOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> charMapFileData = 0,
   flatbuffers::Offset<flatbuffers::String> stringValue = 0,
   flatbuffers::Offset<flatbuffers::String> startCharMap = 0,
   int32_t itemWidth = 0,
   int32_t itemHeight = 0) {
  TextAtlasOptionsBuilder builder_(_fbb);
  builder_.add_itemHeight(itemHeight);
  builder_.add_itemWidth(itemWidth);
  builder_.add_startCharMap(startCharMap);
  builder_.add_stringValue(stringValue);
  builder_.add_charMapFileData(charMapFileData);
  return builder_.Finish();
}

struct TextBMFontOptions : private flatbuffers::Table {
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(4); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* text */) &&
           verifier.Verify(text()) &&
           verifier.EndTable();
  }
};

struct TextBMFontOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(4, fileNameData); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(6, text); }
  TextBMFontOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextBMFontOptionsBuilder &operator=(const TextBMFontOptionsBuilder &);
  flatbuffers::Offset<TextBMFontOptions> Finish() {
    auto o = flatbuffers::Offset<TextBMFontOptions>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TextBMFontOptions> CreateTextBMFontOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fileNameData = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0) {
  TextBMFontOptionsBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_fileNameData(fileNameData);
  return builder_.Finish();
}

struct TextOptions : private flatbuffers::Table {
  const ResourceData *fontResource() const { return GetPointer<const ResourceData *>(4); }
  const flatbuffers::String *fontName() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t fontSize() const { return GetField<int32_t>(8, 0); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(10); }
  int32_t areaWidth() const { return GetField<int32_t>(12, 0); }
  int32_t areaHeight() const { return GetField<int32_t>(14, 0); }
  int32_t hAlignment() const { return GetField<int32_t>(16, 0); }
  int32_t vAlignment() const { return GetField<int32_t>(18, 0); }
  uint8_t touchScaleEnable() const { return GetField<uint8_t>(20, 0); }
  uint8_t isCustomSize() const { return GetField<uint8_t>(22, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fontResource */) &&
           verifier.VerifyTable(fontResource()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* fontName */) &&
           verifier.Verify(fontName()) &&
           VerifyField<int32_t>(verifier, 8 /* fontSize */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* text */) &&
           verifier.Verify(text()) &&
           VerifyField<int32_t>(verifier, 12 /* areaWidth */) &&
           VerifyField<int32_t>(verifier, 14 /* areaHeight */) &&
           VerifyField<int32_t>(verifier, 16 /* hAlignment */) &&
           VerifyField<int32_t>(verifier, 18 /* vAlignment */) &&
           VerifyField<uint8_t>(verifier, 20 /* touchScaleEnable */) &&
           VerifyField<uint8_t>(verifier, 22 /* isCustomSize */) &&
           verifier.EndTable();
  }
};

struct TextOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fontResource(flatbuffers::Offset<ResourceData> fontResource) { fbb_.AddOffset(4, fontResource); }
  void add_fontName(flatbuffers::Offset<flatbuffers::String> fontName) { fbb_.AddOffset(6, fontName); }
  void add_fontSize(int32_t fontSize) { fbb_.AddElement<int32_t>(8, fontSize, 0); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(10, text); }
  void add_areaWidth(int32_t areaWidth) { fbb_.AddElement<int32_t>(12, areaWidth, 0); }
  void add_areaHeight(int32_t areaHeight) { fbb_.AddElement<int32_t>(14, areaHeight, 0); }
  void add_hAlignment(int32_t hAlignment) { fbb_.AddElement<int32_t>(16, hAlignment, 0); }
  void add_vAlignment(int32_t vAlignment) { fbb_.AddElement<int32_t>(18, vAlignment, 0); }
  void add_touchScaleEnable(uint8_t touchScaleEnable) { fbb_.AddElement<uint8_t>(20, touchScaleEnable, 0); }
  void add_isCustomSize(uint8_t isCustomSize) { fbb_.AddElement<uint8_t>(22, isCustomSize, 0); }
  TextOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextOptionsBuilder &operator=(const TextOptionsBuilder &);
  flatbuffers::Offset<TextOptions> Finish() {
    auto o = flatbuffers::Offset<TextOptions>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<TextOptions> CreateTextOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fontResource = 0,
   flatbuffers::Offset<flatbuffers::String> fontName = 0,
   int32_t fontSize = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0,
   int32_t areaWidth = 0,
   int32_t areaHeight = 0,
   int32_t hAlignment = 0,
   int32_t vAlignment = 0,
   uint8_t touchScaleEnable = 0,
   uint8_t isCustomSize = 0) {
  TextOptionsBuilder builder_(_fbb);
  builder_.add_vAlignment(vAlignment);
  builder_.add_hAlignment(hAlignment);
  builder_.add_areaHeight(areaHeight);
  builder_.add_areaWidth(areaWidth);
  builder_.add_text(text);
  builder_.add_fontSize(fontSize);
  builder_.add_fontName(fontName);
  builder_.add_fontResource(fontResource);
  builder_.add_isCustomSize(isCustomSize);
  builder_.add_touchScaleEnable(touchScaleEnable);
  return builder_.Finish();
}

struct TextFieldOptions : private flatbuffers::Table {
  const ResourceData *fontResource() const { return GetPointer<const ResourceData *>(4); }
  const flatbuffers::String *fontName() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t fontSize() const { return GetField<int32_t>(8, 0); }
  const flatbuffers::String *text() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *placeHolder() const { return GetPointer<const flatbuffers::String *>(12); }
  uint8_t passwordEnabled() const { return GetField<uint8_t>(14, 0); }
  const flatbuffers::String *passwordStyleText() const { return GetPointer<const flatbuffers::String *>(16); }
  uint8_t maxLengthEnabled() const { return GetField<uint8_t>(18, 0); }
  int32_t maxLength() const { return GetField<int32_t>(20, 0); }
  int32_t areaWidth() const { return GetField<int32_t>(22, 0); }
  int32_t areaHeight() const { return GetField<int32_t>(24, 0); }
  uint8_t isCustomSize() const { return GetField<uint8_t>(26, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fontResource */) &&
           verifier.VerifyTable(fontResource()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* fontName */) &&
           verifier.Verify(fontName()) &&
           VerifyField<int32_t>(verifier, 8 /* fontSize */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* text */) &&
           verifier.Verify(text()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* placeHolder */) &&
           verifier.Verify(placeHolder()) &&
           VerifyField<uint8_t>(verifier, 14 /* passwordEnabled */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* passwordStyleText */) &&
           verifier.Verify(passwordStyleText()) &&
           VerifyField<uint8_t>(verifier, 18 /* maxLengthEnabled */) &&
           VerifyField<int32_t>(verifier, 20 /* maxLength */) &&
           VerifyField<int32_t>(verifier, 22 /* areaWidth */) &&
           VerifyField<int32_t>(verifier, 24 /* areaHeight */) &&
           VerifyField<uint8_t>(verifier, 26 /* isCustomSize */) &&
           verifier.EndTable();
  }
};

struct TextFieldOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fontResource(flatbuffers::Offset<ResourceData> fontResource) { fbb_.AddOffset(4, fontResource); }
  void add_fontName(flatbuffers::Offset<flatbuffers::String> fontName) { fbb_.AddOffset(6, fontName); }
  void add_fontSize(int32_t fontSize) { fbb_.AddElement<int32_t>(8, fontSize, 0); }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) { fbb_.AddOffset(10, text); }
  void add_placeHolder(flatbuffers::Offset<flatbuffers::String> placeHolder) { fbb_.AddOffset(12, placeHolder); }
  void add_passwordEnabled(uint8_t passwordEnabled) { fbb_.AddElement<uint8_t>(14, passwordEnabled, 0); }
  void add_passwordStyleText(flatbuffers::Offset<flatbuffers::String> passwordStyleText) { fbb_.AddOffset(16, passwordStyleText); }
  void add_maxLengthEnabled(uint8_t maxLengthEnabled) { fbb_.AddElement<uint8_t>(18, maxLengthEnabled, 0); }
  void add_maxLength(int32_t maxLength) { fbb_.AddElement<int32_t>(20, maxLength, 0); }
  void add_areaWidth(int32_t areaWidth) { fbb_.AddElement<int32_t>(22, areaWidth, 0); }
  void add_areaHeight(int32_t areaHeight) { fbb_.AddElement<int32_t>(24, areaHeight, 0); }
  void add_isCustomSize(uint8_t isCustomSize) { fbb_.AddElement<uint8_t>(26, isCustomSize, 0); }
  TextFieldOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextFieldOptionsBuilder &operator=(const TextFieldOptionsBuilder &);
  flatbuffers::Offset<TextFieldOptions> Finish() {
    auto o = flatbuffers::Offset<TextFieldOptions>(fbb_.EndTable(start_, 12));
    return o;
  }
};

inline flatbuffers::Offset<TextFieldOptions> CreateTextFieldOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> fontResource = 0,
   flatbuffers::Offset<flatbuffers::String> fontName = 0,
   int32_t fontSize = 0,
   flatbuffers::Offset<flatbuffers::String> text = 0,
   flatbuffers::Offset<flatbuffers::String> placeHolder = 0,
   uint8_t passwordEnabled = 0,
   flatbuffers::Offset<flatbuffers::String> passwordStyleText = 0,
   uint8_t maxLengthEnabled = 0,
   int32_t maxLength = 0,
   int32_t areaWidth = 0,
   int32_t areaHeight = 0,
   uint8_t isCustomSize = 0) {
  TextFieldOptionsBuilder builder_(_fbb);
  builder_.add_areaHeight(areaHeight);
  builder_.add_areaWidth(areaWidth);
  builder_.add_maxLength(maxLength);
  builder_.add_passwordStyleText(passwordStyleText);
  builder_.add_placeHolder(placeHolder);
  builder_.add_text(text);
  builder_.add_fontSize(fontSize);
  builder_.add_fontName(fontName);
  builder_.add_fontResource(fontResource);
  builder_.add_isCustomSize(isCustomSize);
  builder_.add_maxLengthEnabled(maxLengthEnabled);
  builder_.add_passwordEnabled(passwordEnabled);
  return builder_.Finish();
}

struct LoadingBarOptions : private flatbuffers::Table {
  const ResourceData *textureData() const { return GetPointer<const ResourceData *>(4); }
  int32_t percent() const { return GetField<int32_t>(6, 80); }
  int32_t direction() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* textureData */) &&
           verifier.VerifyTable(textureData()) &&
           VerifyField<int32_t>(verifier, 6 /* percent */) &&
           VerifyField<int32_t>(verifier, 8 /* direction */) &&
           verifier.EndTable();
  }
};

struct LoadingBarOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textureData(flatbuffers::Offset<ResourceData> textureData) { fbb_.AddOffset(4, textureData); }
  void add_percent(int32_t percent) { fbb_.AddElement<int32_t>(6, percent, 80); }
  void add_direction(int32_t direction) { fbb_.AddElement<int32_t>(8, direction, 0); }
  LoadingBarOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LoadingBarOptionsBuilder &operator=(const LoadingBarOptionsBuilder &);
  flatbuffers::Offset<LoadingBarOptions> Finish() {
    auto o = flatbuffers::Offset<LoadingBarOptions>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<LoadingBarOptions> CreateLoadingBarOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> textureData = 0,
   int32_t percent = 80,
   int32_t direction = 0) {
  LoadingBarOptionsBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_percent(percent);
  builder_.add_textureData(textureData);
  return builder_.Finish();
}

struct SliderOptions : private flatbuffers::Table {
  const ResourceData *barFileNameData() const { return GetPointer<const ResourceData *>(4); }
  const ResourceData *ballNormalData() const { return GetPointer<const ResourceData *>(6); }
  const ResourceData *ballPressedData() const { return GetPointer<const ResourceData *>(8); }
  const ResourceData *ballDisabledData() const { return GetPointer<const ResourceData *>(10); }
  const ResourceData *progressBarData() const { return GetPointer<const ResourceData *>(12); }
  int32_t percent() const { return GetField<int32_t>(14, 50); }
  uint8_t displaystate() const { return GetField<uint8_t>(16, 1); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* barFileNameData */) &&
           verifier.VerifyTable(barFileNameData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ballNormalData */) &&
           verifier.VerifyTable(ballNormalData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* ballPressedData */) &&
           verifier.VerifyTable(ballPressedData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* ballDisabledData */) &&
           verifier.VerifyTable(ballDisabledData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* progressBarData */) &&
           verifier.VerifyTable(progressBarData()) &&
           VerifyField<int32_t>(verifier, 14 /* percent */) &&
           VerifyField<uint8_t>(verifier, 16 /* displaystate */) &&
           verifier.EndTable();
  }
};

struct SliderOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_barFileNameData(flatbuffers::Offset<ResourceData> barFileNameData) { fbb_.AddOffset(4, barFileNameData); }
  void add_ballNormalData(flatbuffers::Offset<ResourceData> ballNormalData) { fbb_.AddOffset(6, ballNormalData); }
  void add_ballPressedData(flatbuffers::Offset<ResourceData> ballPressedData) { fbb_.AddOffset(8, ballPressedData); }
  void add_ballDisabledData(flatbuffers::Offset<ResourceData> ballDisabledData) { fbb_.AddOffset(10, ballDisabledData); }
  void add_progressBarData(flatbuffers::Offset<ResourceData> progressBarData) { fbb_.AddOffset(12, progressBarData); }
  void add_percent(int32_t percent) { fbb_.AddElement<int32_t>(14, percent, 50); }
  void add_displaystate(uint8_t displaystate) { fbb_.AddElement<uint8_t>(16, displaystate, 1); }
  SliderOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SliderOptionsBuilder &operator=(const SliderOptionsBuilder &);
  flatbuffers::Offset<SliderOptions> Finish() {
    auto o = flatbuffers::Offset<SliderOptions>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<SliderOptions> CreateSliderOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> barFileNameData = 0,
   flatbuffers::Offset<ResourceData> ballNormalData = 0,
   flatbuffers::Offset<ResourceData> ballPressedData = 0,
   flatbuffers::Offset<ResourceData> ballDisabledData = 0,
   flatbuffers::Offset<ResourceData> progressBarData = 0,
   int32_t percent = 50,
   uint8_t displaystate = 1) {
  SliderOptionsBuilder builder_(_fbb);
  builder_.add_percent(percent);
  builder_.add_progressBarData(progressBarData);
  builder_.add_ballDisabledData(ballDisabledData);
  builder_.add_ballPressedData(ballPressedData);
  builder_.add_ballNormalData(ballNormalData);
  builder_.add_barFileNameData(barFileNameData);
  builder_.add_displaystate(displaystate);
  return builder_.Finish();
}

struct PanelOptions : private flatbuffers::Table {
  const ResourceData *backGroundImageData() const { return GetPointer<const ResourceData *>(4); }
  uint8_t clipEnabled() const { return GetField<uint8_t>(6, 0); }
  const Color *bgColor() const { return GetStruct<const Color *>(8); }
  const Color *bgStartColor() const { return GetStruct<const Color *>(10); }
  const Color *bgEndColor() const { return GetStruct<const Color *>(12); }
  int32_t colorType() const { return GetField<int32_t>(14, 0); }
  uint8_t bgColorOpacity() const { return GetField<uint8_t>(16, 255); }
  const ColorVector *colorVector() const { return GetStruct<const ColorVector *>(18); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(20); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(22); }
  uint8_t backGroundScale9Enabled() const { return GetField<uint8_t>(24, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* backGroundImageData */) &&
           verifier.VerifyTable(backGroundImageData()) &&
           VerifyField<uint8_t>(verifier, 6 /* clipEnabled */) &&
           VerifyField<Color>(verifier, 8 /* bgColor */) &&
           VerifyField<Color>(verifier, 10 /* bgStartColor */) &&
           VerifyField<Color>(verifier, 12 /* bgEndColor */) &&
           VerifyField<int32_t>(verifier, 14 /* colorType */) &&
           VerifyField<uint8_t>(verifier, 16 /* bgColorOpacity */) &&
           VerifyField<ColorVector>(verifier, 18 /* colorVector */) &&
           VerifyField<CapInsets>(verifier, 20 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 22 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 24 /* backGroundScale9Enabled */) &&
           verifier.EndTable();
  }
};

struct PanelOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_backGroundImageData(flatbuffers::Offset<ResourceData> backGroundImageData) { fbb_.AddOffset(4, backGroundImageData); }
  void add_clipEnabled(uint8_t clipEnabled) { fbb_.AddElement<uint8_t>(6, clipEnabled, 0); }
  void add_bgColor(const Color *bgColor) { fbb_.AddStruct(8, bgColor); }
  void add_bgStartColor(const Color *bgStartColor) { fbb_.AddStruct(10, bgStartColor); }
  void add_bgEndColor(const Color *bgEndColor) { fbb_.AddStruct(12, bgEndColor); }
  void add_colorType(int32_t colorType) { fbb_.AddElement<int32_t>(14, colorType, 0); }
  void add_bgColorOpacity(uint8_t bgColorOpacity) { fbb_.AddElement<uint8_t>(16, bgColorOpacity, 255); }
  void add_colorVector(const ColorVector *colorVector) { fbb_.AddStruct(18, colorVector); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(20, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(22, scale9Size); }
  void add_backGroundScale9Enabled(uint8_t backGroundScale9Enabled) { fbb_.AddElement<uint8_t>(24, backGroundScale9Enabled, 0); }
  PanelOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PanelOptionsBuilder &operator=(const PanelOptionsBuilder &);
  flatbuffers::Offset<PanelOptions> Finish() {
    auto o = flatbuffers::Offset<PanelOptions>(fbb_.EndTable(start_, 11));
    return o;
  }
};

inline flatbuffers::Offset<PanelOptions> CreatePanelOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> backGroundImageData = 0,
   uint8_t clipEnabled = 0,
   const Color *bgColor = 0,
   const Color *bgStartColor = 0,
   const Color *bgEndColor = 0,
   int32_t colorType = 0,
   uint8_t bgColorOpacity = 255,
   const ColorVector *colorVector = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t backGroundScale9Enabled = 0) {
  PanelOptionsBuilder builder_(_fbb);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_colorVector(colorVector);
  builder_.add_colorType(colorType);
  builder_.add_bgEndColor(bgEndColor);
  builder_.add_bgStartColor(bgStartColor);
  builder_.add_bgColor(bgColor);
  builder_.add_backGroundImageData(backGroundImageData);
  builder_.add_backGroundScale9Enabled(backGroundScale9Enabled);
  builder_.add_bgColorOpacity(bgColorOpacity);
  builder_.add_clipEnabled(clipEnabled);
  return builder_.Finish();
}

struct ScrollViewOptions : private flatbuffers::Table {
  const ResourceData *backGroundImageData() const { return GetPointer<const ResourceData *>(4); }
  uint8_t clipEnabled() const { return GetField<uint8_t>(6, 0); }
  const Color *bgColor() const { return GetStruct<const Color *>(8); }
  const Color *bgStartColor() const { return GetStruct<const Color *>(10); }
  const Color *bgEndColor() const { return GetStruct<const Color *>(12); }
  int32_t colorType() const { return GetField<int32_t>(14, 0); }
  uint8_t bgColorOpacity() const { return GetField<uint8_t>(16, 255); }
  const ColorVector *colorVector() const { return GetStruct<const ColorVector *>(18); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(20); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(22); }
  uint8_t backGroundScale9Enabled() const { return GetField<uint8_t>(24, 0); }
  const FlatSize *innerSize() const { return GetStruct<const FlatSize *>(26); }
  int32_t direction() const { return GetField<int32_t>(28, 0); }
  uint8_t bounceEnabled() const { return GetField<uint8_t>(30, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* backGroundImageData */) &&
           verifier.VerifyTable(backGroundImageData()) &&
           VerifyField<uint8_t>(verifier, 6 /* clipEnabled */) &&
           VerifyField<Color>(verifier, 8 /* bgColor */) &&
           VerifyField<Color>(verifier, 10 /* bgStartColor */) &&
           VerifyField<Color>(verifier, 12 /* bgEndColor */) &&
           VerifyField<int32_t>(verifier, 14 /* colorType */) &&
           VerifyField<uint8_t>(verifier, 16 /* bgColorOpacity */) &&
           VerifyField<ColorVector>(verifier, 18 /* colorVector */) &&
           VerifyField<CapInsets>(verifier, 20 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 22 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 24 /* backGroundScale9Enabled */) &&
           VerifyField<FlatSize>(verifier, 26 /* innerSize */) &&
           VerifyField<int32_t>(verifier, 28 /* direction */) &&
           VerifyField<uint8_t>(verifier, 30 /* bounceEnabled */) &&
           verifier.EndTable();
  }
};

struct ScrollViewOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_backGroundImageData(flatbuffers::Offset<ResourceData> backGroundImageData) { fbb_.AddOffset(4, backGroundImageData); }
  void add_clipEnabled(uint8_t clipEnabled) { fbb_.AddElement<uint8_t>(6, clipEnabled, 0); }
  void add_bgColor(const Color *bgColor) { fbb_.AddStruct(8, bgColor); }
  void add_bgStartColor(const Color *bgStartColor) { fbb_.AddStruct(10, bgStartColor); }
  void add_bgEndColor(const Color *bgEndColor) { fbb_.AddStruct(12, bgEndColor); }
  void add_colorType(int32_t colorType) { fbb_.AddElement<int32_t>(14, colorType, 0); }
  void add_bgColorOpacity(uint8_t bgColorOpacity) { fbb_.AddElement<uint8_t>(16, bgColorOpacity, 255); }
  void add_colorVector(const ColorVector *colorVector) { fbb_.AddStruct(18, colorVector); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(20, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(22, scale9Size); }
  void add_backGroundScale9Enabled(uint8_t backGroundScale9Enabled) { fbb_.AddElement<uint8_t>(24, backGroundScale9Enabled, 0); }
  void add_innerSize(const FlatSize *innerSize) { fbb_.AddStruct(26, innerSize); }
  void add_direction(int32_t direction) { fbb_.AddElement<int32_t>(28, direction, 0); }
  void add_bounceEnabled(uint8_t bounceEnabled) { fbb_.AddElement<uint8_t>(30, bounceEnabled, 0); }
  ScrollViewOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ScrollViewOptionsBuilder &operator=(const ScrollViewOptionsBuilder &);
  flatbuffers::Offset<ScrollViewOptions> Finish() {
    auto o = flatbuffers::Offset<ScrollViewOptions>(fbb_.EndTable(start_, 14));
    return o;
  }
};

inline flatbuffers::Offset<ScrollViewOptions> CreateScrollViewOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> backGroundImageData = 0,
   uint8_t clipEnabled = 0,
   const Color *bgColor = 0,
   const Color *bgStartColor = 0,
   const Color *bgEndColor = 0,
   int32_t colorType = 0,
   uint8_t bgColorOpacity = 255,
   const ColorVector *colorVector = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t backGroundScale9Enabled = 0,
   const FlatSize *innerSize = 0,
   int32_t direction = 0,
   uint8_t bounceEnabled = 0) {
  ScrollViewOptionsBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_innerSize(innerSize);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_colorVector(colorVector);
  builder_.add_colorType(colorType);
  builder_.add_bgEndColor(bgEndColor);
  builder_.add_bgStartColor(bgStartColor);
  builder_.add_bgColor(bgColor);
  builder_.add_backGroundImageData(backGroundImageData);
  builder_.add_bounceEnabled(bounceEnabled);
  builder_.add_backGroundScale9Enabled(backGroundScale9Enabled);
  builder_.add_bgColorOpacity(bgColorOpacity);
  builder_.add_clipEnabled(clipEnabled);
  return builder_.Finish();
}

struct PageViewOptions : private flatbuffers::Table {
  const ResourceData *backGroundImageData() const { return GetPointer<const ResourceData *>(4); }
  uint8_t clipEnabled() const { return GetField<uint8_t>(6, 0); }
  const Color *bgColor() const { return GetStruct<const Color *>(8); }
  const Color *bgStartColor() const { return GetStruct<const Color *>(10); }
  const Color *bgEndColor() const { return GetStruct<const Color *>(12); }
  int32_t colorType() const { return GetField<int32_t>(14, 0); }
  uint8_t bgColorOpacity() const { return GetField<uint8_t>(16, 255); }
  const ColorVector *colorVector() const { return GetStruct<const ColorVector *>(18); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(20); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(22); }
  uint8_t backGroundScale9Enabled() const { return GetField<uint8_t>(24, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* backGroundImageData */) &&
           verifier.VerifyTable(backGroundImageData()) &&
           VerifyField<uint8_t>(verifier, 6 /* clipEnabled */) &&
           VerifyField<Color>(verifier, 8 /* bgColor */) &&
           VerifyField<Color>(verifier, 10 /* bgStartColor */) &&
           VerifyField<Color>(verifier, 12 /* bgEndColor */) &&
           VerifyField<int32_t>(verifier, 14 /* colorType */) &&
           VerifyField<uint8_t>(verifier, 16 /* bgColorOpacity */) &&
           VerifyField<ColorVector>(verifier, 18 /* colorVector */) &&
           VerifyField<CapInsets>(verifier, 20 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 22 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 24 /* backGroundScale9Enabled */) &&
           verifier.EndTable();
  }
};

struct PageViewOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_backGroundImageData(flatbuffers::Offset<ResourceData> backGroundImageData) { fbb_.AddOffset(4, backGroundImageData); }
  void add_clipEnabled(uint8_t clipEnabled) { fbb_.AddElement<uint8_t>(6, clipEnabled, 0); }
  void add_bgColor(const Color *bgColor) { fbb_.AddStruct(8, bgColor); }
  void add_bgStartColor(const Color *bgStartColor) { fbb_.AddStruct(10, bgStartColor); }
  void add_bgEndColor(const Color *bgEndColor) { fbb_.AddStruct(12, bgEndColor); }
  void add_colorType(int32_t colorType) { fbb_.AddElement<int32_t>(14, colorType, 0); }
  void add_bgColorOpacity(uint8_t bgColorOpacity) { fbb_.AddElement<uint8_t>(16, bgColorOpacity, 255); }
  void add_colorVector(const ColorVector *colorVector) { fbb_.AddStruct(18, colorVector); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(20, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(22, scale9Size); }
  void add_backGroundScale9Enabled(uint8_t backGroundScale9Enabled) { fbb_.AddElement<uint8_t>(24, backGroundScale9Enabled, 0); }
  PageViewOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PageViewOptionsBuilder &operator=(const PageViewOptionsBuilder &);
  flatbuffers::Offset<PageViewOptions> Finish() {
    auto o = flatbuffers::Offset<PageViewOptions>(fbb_.EndTable(start_, 11));
    return o;
  }
};

inline flatbuffers::Offset<PageViewOptions> CreatePageViewOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> backGroundImageData = 0,
   uint8_t clipEnabled = 0,
   const Color *bgColor = 0,
   const Color *bgStartColor = 0,
   const Color *bgEndColor = 0,
   int32_t colorType = 0,
   uint8_t bgColorOpacity = 255,
   const ColorVector *colorVector = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t backGroundScale9Enabled = 0) {
  PageViewOptionsBuilder builder_(_fbb);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_colorVector(colorVector);
  builder_.add_colorType(colorType);
  builder_.add_bgEndColor(bgEndColor);
  builder_.add_bgStartColor(bgStartColor);
  builder_.add_bgColor(bgColor);
  builder_.add_backGroundImageData(backGroundImageData);
  builder_.add_backGroundScale9Enabled(backGroundScale9Enabled);
  builder_.add_bgColorOpacity(bgColorOpacity);
  builder_.add_clipEnabled(clipEnabled);
  return builder_.Finish();
}

struct ListViewOptions : private flatbuffers::Table {
  const ResourceData *backGroundImageData() const { return GetPointer<const ResourceData *>(4); }
  uint8_t clipEnabled() const { return GetField<uint8_t>(6, 0); }
  const Color *bgColor() const { return GetStruct<const Color *>(8); }
  const Color *bgStartColor() const { return GetStruct<const Color *>(10); }
  const Color *bgEndColor() const { return GetStruct<const Color *>(12); }
  int32_t colorType() const { return GetField<int32_t>(14, 0); }
  uint8_t bgColorOpacity() const { return GetField<uint8_t>(16, 255); }
  const ColorVector *colorVector() const { return GetStruct<const ColorVector *>(18); }
  const CapInsets *capInsets() const { return GetStruct<const CapInsets *>(20); }
  const FlatSize *scale9Size() const { return GetStruct<const FlatSize *>(22); }
  uint8_t backGroundScale9Enabled() const { return GetField<uint8_t>(24, 0); }
  const FlatSize *innerSize() const { return GetStruct<const FlatSize *>(26); }
  int32_t direction() const { return GetField<int32_t>(28, 0); }
  uint8_t bounceEnabled() const { return GetField<uint8_t>(30, 0); }
  int32_t gravity() const { return GetField<int32_t>(32, 0); }
  int32_t itemMargin() const { return GetField<int32_t>(34, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* backGroundImageData */) &&
           verifier.VerifyTable(backGroundImageData()) &&
           VerifyField<uint8_t>(verifier, 6 /* clipEnabled */) &&
           VerifyField<Color>(verifier, 8 /* bgColor */) &&
           VerifyField<Color>(verifier, 10 /* bgStartColor */) &&
           VerifyField<Color>(verifier, 12 /* bgEndColor */) &&
           VerifyField<int32_t>(verifier, 14 /* colorType */) &&
           VerifyField<uint8_t>(verifier, 16 /* bgColorOpacity */) &&
           VerifyField<ColorVector>(verifier, 18 /* colorVector */) &&
           VerifyField<CapInsets>(verifier, 20 /* capInsets */) &&
           VerifyField<FlatSize>(verifier, 22 /* scale9Size */) &&
           VerifyField<uint8_t>(verifier, 24 /* backGroundScale9Enabled */) &&
           VerifyField<FlatSize>(verifier, 26 /* innerSize */) &&
           VerifyField<int32_t>(verifier, 28 /* direction */) &&
           VerifyField<uint8_t>(verifier, 30 /* bounceEnabled */) &&
           VerifyField<int32_t>(verifier, 32 /* gravity */) &&
           VerifyField<int32_t>(verifier, 34 /* itemMargin */) &&
           verifier.EndTable();
  }
};

struct ListViewOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_backGroundImageData(flatbuffers::Offset<ResourceData> backGroundImageData) { fbb_.AddOffset(4, backGroundImageData); }
  void add_clipEnabled(uint8_t clipEnabled) { fbb_.AddElement<uint8_t>(6, clipEnabled, 0); }
  void add_bgColor(const Color *bgColor) { fbb_.AddStruct(8, bgColor); }
  void add_bgStartColor(const Color *bgStartColor) { fbb_.AddStruct(10, bgStartColor); }
  void add_bgEndColor(const Color *bgEndColor) { fbb_.AddStruct(12, bgEndColor); }
  void add_colorType(int32_t colorType) { fbb_.AddElement<int32_t>(14, colorType, 0); }
  void add_bgColorOpacity(uint8_t bgColorOpacity) { fbb_.AddElement<uint8_t>(16, bgColorOpacity, 255); }
  void add_colorVector(const ColorVector *colorVector) { fbb_.AddStruct(18, colorVector); }
  void add_capInsets(const CapInsets *capInsets) { fbb_.AddStruct(20, capInsets); }
  void add_scale9Size(const FlatSize *scale9Size) { fbb_.AddStruct(22, scale9Size); }
  void add_backGroundScale9Enabled(uint8_t backGroundScale9Enabled) { fbb_.AddElement<uint8_t>(24, backGroundScale9Enabled, 0); }
  void add_innerSize(const FlatSize *innerSize) { fbb_.AddStruct(26, innerSize); }
  void add_direction(int32_t direction) { fbb_.AddElement<int32_t>(28, direction, 0); }
  void add_bounceEnabled(uint8_t bounceEnabled) { fbb_.AddElement<uint8_t>(30, bounceEnabled, 0); }
  void add_gravity(int32_t gravity) { fbb_.AddElement<int32_t>(32, gravity, 0); }
  void add_itemMargin(int32_t itemMargin) { fbb_.AddElement<int32_t>(34, itemMargin, 0); }
  ListViewOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ListViewOptionsBuilder &operator=(const ListViewOptionsBuilder &);
  flatbuffers::Offset<ListViewOptions> Finish() {
    auto o = flatbuffers::Offset<ListViewOptions>(fbb_.EndTable(start_, 16));
    return o;
  }
};

inline flatbuffers::Offset<ListViewOptions> CreateListViewOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<ResourceData> backGroundImageData = 0,
   uint8_t clipEnabled = 0,
   const Color *bgColor = 0,
   const Color *bgStartColor = 0,
   const Color *bgEndColor = 0,
   int32_t colorType = 0,
   uint8_t bgColorOpacity = 255,
   const ColorVector *colorVector = 0,
   const CapInsets *capInsets = 0,
   const FlatSize *scale9Size = 0,
   uint8_t backGroundScale9Enabled = 0,
   const FlatSize *innerSize = 0,
   int32_t direction = 0,
   uint8_t bounceEnabled = 0,
   int32_t gravity = 0,
   int32_t itemMargin = 0) {
  ListViewOptionsBuilder builder_(_fbb);
  builder_.add_itemMargin(itemMargin);
  builder_.add_gravity(gravity);
  builder_.add_direction(direction);
  builder_.add_innerSize(innerSize);
  builder_.add_scale9Size(scale9Size);
  builder_.add_capInsets(capInsets);
  builder_.add_colorVector(colorVector);
  builder_.add_colorType(colorType);
  builder_.add_bgEndColor(bgEndColor);
  builder_.add_bgStartColor(bgStartColor);
  builder_.add_bgColor(bgColor);
  builder_.add_backGroundImageData(backGroundImageData);
  builder_.add_bounceEnabled(bounceEnabled);
  builder_.add_backGroundScale9Enabled(backGroundScale9Enabled);
  builder_.add_bgColorOpacity(bgColorOpacity);
  builder_.add_clipEnabled(clipEnabled);
  return builder_.Finish();
}

struct ProjectNodeOptions : private flatbuffers::Table {
  const flatbuffers::String *fileName() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* fileName */) &&
           verifier.Verify(fileName()) &&
           verifier.EndTable();
  }
};

struct ProjectNodeOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fileName(flatbuffers::Offset<flatbuffers::String> fileName) { fbb_.AddOffset(4, fileName); }
  ProjectNodeOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ProjectNodeOptionsBuilder &operator=(const ProjectNodeOptionsBuilder &);
  flatbuffers::Offset<ProjectNodeOptions> Finish() {
    auto o = flatbuffers::Offset<ProjectNodeOptions>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ProjectNodeOptions> CreateProjectNodeOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> fileName = 0) {
  ProjectNodeOptionsBuilder builder_(_fbb);
  builder_.add_fileName(fileName);
  return builder_.Finish();
}

struct ComponentOptions : private flatbuffers::Table {
  const flatbuffers::String *type() const { return GetPointer<const flatbuffers::String *>(4); }
  const ComAudioOptions *comAudioOptions() const { return GetPointer<const ComAudioOptions *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* type */) &&
           verifier.Verify(type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* comAudioOptions */) &&
           verifier.VerifyTable(comAudioOptions()) &&
           verifier.EndTable();
  }
};

struct ComponentOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) { fbb_.AddOffset(4, type); }
  void add_comAudioOptions(flatbuffers::Offset<ComAudioOptions> comAudioOptions) { fbb_.AddOffset(6, comAudioOptions); }
  ComponentOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ComponentOptionsBuilder &operator=(const ComponentOptionsBuilder &);
  flatbuffers::Offset<ComponentOptions> Finish() {
    auto o = flatbuffers::Offset<ComponentOptions>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ComponentOptions> CreateComponentOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> type = 0,
   flatbuffers::Offset<ComAudioOptions> comAudioOptions = 0) {
  ComponentOptionsBuilder builder_(_fbb);
  builder_.add_comAudioOptions(comAudioOptions);
  builder_.add_type(type);
  return builder_.Finish();
}

struct ComAudioOptions : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint8_t enabled() const { return GetField<uint8_t>(6, 0); }
  uint8_t loop() const { return GetField<uint8_t>(8, 0); }
  int32_t volume() const { return GetField<int32_t>(10, 0); }
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, 6 /* enabled */) &&
           VerifyField<uint8_t>(verifier, 8 /* loop */) &&
           VerifyField<int32_t>(verifier, 10 /* volume */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           verifier.EndTable();
  }
};

struct ComAudioOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_enabled(uint8_t enabled) { fbb_.AddElement<uint8_t>(6, enabled, 0); }
  void add_loop(uint8_t loop) { fbb_.AddElement<uint8_t>(8, loop, 0); }
  void add_volume(int32_t volume) { fbb_.AddElement<int32_t>(10, volume, 0); }
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(12, fileNameData); }
  ComAudioOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ComAudioOptionsBuilder &operator=(const ComAudioOptionsBuilder &);
  flatbuffers::Offset<ComAudioOptions> Finish() {
    auto o = flatbuffers::Offset<ComAudioOptions>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<ComAudioOptions> CreateComAudioOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint8_t enabled = 0,
   uint8_t loop = 0,
   int32_t volume = 0,
   flatbuffers::Offset<ResourceData> fileNameData = 0) {
  ComAudioOptionsBuilder builder_(_fbb);
  builder_.add_fileNameData(fileNameData);
  builder_.add_volume(volume);
  builder_.add_name(name);
  builder_.add_loop(loop);
  builder_.add_enabled(enabled);
  return builder_.Finish();
}

struct NodeAction : private flatbuffers::Table {
  int32_t duration() const { return GetField<int32_t>(4, 0); }
  float speed() const { return GetField<float>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<TimeLine>> *timeLines() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TimeLine>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* duration */) &&
           VerifyField<float>(verifier, 6 /* speed */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* timeLines */) &&
           verifier.Verify(timeLines()) &&
           verifier.VerifyVectorOfTables(timeLines()) &&
           verifier.EndTable();
  }
};

struct NodeActionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_duration(int32_t duration) { fbb_.AddElement<int32_t>(4, duration, 0); }
  void add_speed(float speed) { fbb_.AddElement<float>(6, speed, 0); }
  void add_timeLines(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TimeLine>>> timeLines) { fbb_.AddOffset(8, timeLines); }
  NodeActionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NodeActionBuilder &operator=(const NodeActionBuilder &);
  flatbuffers::Offset<NodeAction> Finish() {
    auto o = flatbuffers::Offset<NodeAction>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<NodeAction> CreateNodeAction(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t duration = 0,
   float speed = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TimeLine>>> timeLines = 0) {
  NodeActionBuilder builder_(_fbb);
  builder_.add_timeLines(timeLines);
  builder_.add_speed(speed);
  builder_.add_duration(duration);
  return builder_.Finish();
}

struct TimeLine : private flatbuffers::Table {
  const flatbuffers::String *frameType() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t actionTag() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<Frame>> *frames() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Frame>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* frameType */) &&
           verifier.Verify(frameType()) &&
           VerifyField<int32_t>(verifier, 6 /* actionTag */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* frames */) &&
           verifier.Verify(frames()) &&
           verifier.VerifyVectorOfTables(frames()) &&
           verifier.EndTable();
  }
};

struct TimeLineBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameType(flatbuffers::Offset<flatbuffers::String> frameType) { fbb_.AddOffset(4, frameType); }
  void add_actionTag(int32_t actionTag) { fbb_.AddElement<int32_t>(6, actionTag, 0); }
  void add_frames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Frame>>> frames) { fbb_.AddOffset(8, frames); }
  TimeLineBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineBuilder &operator=(const TimeLineBuilder &);
  flatbuffers::Offset<TimeLine> Finish() {
    auto o = flatbuffers::Offset<TimeLine>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLine> CreateTimeLine(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> frameType = 0,
   int32_t actionTag = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Frame>>> frames = 0) {
  TimeLineBuilder builder_(_fbb);
  builder_.add_frames(frames);
  builder_.add_actionTag(actionTag);
  builder_.add_frameType(frameType);
  return builder_.Finish();
}

struct Frame : private flatbuffers::Table {
  const TimeLineBoolFrame *visibleFrame() const { return GetPointer<const TimeLineBoolFrame *>(4); }
  const TimeLineIntFrame *zOrderFrame() const { return GetPointer<const TimeLineIntFrame *>(6); }
  const TimeLinePointFrame *rotationSkewFrame() const { return GetPointer<const TimeLinePointFrame *>(8); }
  const TimeLineStringFrame *eventFrame() const { return GetPointer<const TimeLineStringFrame *>(10); }
  const TimeLinePointFrame *anchorPointFrame() const { return GetPointer<const TimeLinePointFrame *>(12); }
  const TimeLinePointFrame *positionFrame() const { return GetPointer<const TimeLinePointFrame *>(14); }
  const TimeLinePointFrame *scaleFrame() const { return GetPointer<const TimeLinePointFrame *>(16); }
  const TimeLineColorFrame *colorFrame() const { return GetPointer<const TimeLineColorFrame *>(18); }
  const TimeLineTextureFrame *textureFrame() const { return GetPointer<const TimeLineTextureFrame *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* visibleFrame */) &&
           verifier.VerifyTable(visibleFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* zOrderFrame */) &&
           verifier.VerifyTable(zOrderFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* rotationSkewFrame */) &&
           verifier.VerifyTable(rotationSkewFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* eventFrame */) &&
           verifier.VerifyTable(eventFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* anchorPointFrame */) &&
           verifier.VerifyTable(anchorPointFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* positionFrame */) &&
           verifier.VerifyTable(positionFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* scaleFrame */) &&
           verifier.VerifyTable(scaleFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* colorFrame */) &&
           verifier.VerifyTable(colorFrame()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* textureFrame */) &&
           verifier.VerifyTable(textureFrame()) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_visibleFrame(flatbuffers::Offset<TimeLineBoolFrame> visibleFrame) { fbb_.AddOffset(4, visibleFrame); }
  void add_zOrderFrame(flatbuffers::Offset<TimeLineIntFrame> zOrderFrame) { fbb_.AddOffset(6, zOrderFrame); }
  void add_rotationSkewFrame(flatbuffers::Offset<TimeLinePointFrame> rotationSkewFrame) { fbb_.AddOffset(8, rotationSkewFrame); }
  void add_eventFrame(flatbuffers::Offset<TimeLineStringFrame> eventFrame) { fbb_.AddOffset(10, eventFrame); }
  void add_anchorPointFrame(flatbuffers::Offset<TimeLinePointFrame> anchorPointFrame) { fbb_.AddOffset(12, anchorPointFrame); }
  void add_positionFrame(flatbuffers::Offset<TimeLinePointFrame> positionFrame) { fbb_.AddOffset(14, positionFrame); }
  void add_scaleFrame(flatbuffers::Offset<TimeLinePointFrame> scaleFrame) { fbb_.AddOffset(16, scaleFrame); }
  void add_colorFrame(flatbuffers::Offset<TimeLineColorFrame> colorFrame) { fbb_.AddOffset(18, colorFrame); }
  void add_textureFrame(flatbuffers::Offset<TimeLineTextureFrame> textureFrame) { fbb_.AddOffset(20, textureFrame); }
  FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FrameBuilder &operator=(const FrameBuilder &);
  flatbuffers::Offset<Frame> Finish() {
    auto o = flatbuffers::Offset<Frame>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<TimeLineBoolFrame> visibleFrame = 0,
   flatbuffers::Offset<TimeLineIntFrame> zOrderFrame = 0,
   flatbuffers::Offset<TimeLinePointFrame> rotationSkewFrame = 0,
   flatbuffers::Offset<TimeLineStringFrame> eventFrame = 0,
   flatbuffers::Offset<TimeLinePointFrame> anchorPointFrame = 0,
   flatbuffers::Offset<TimeLinePointFrame> positionFrame = 0,
   flatbuffers::Offset<TimeLinePointFrame> scaleFrame = 0,
   flatbuffers::Offset<TimeLineColorFrame> colorFrame = 0,
   flatbuffers::Offset<TimeLineTextureFrame> textureFrame = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_textureFrame(textureFrame);
  builder_.add_colorFrame(colorFrame);
  builder_.add_scaleFrame(scaleFrame);
  builder_.add_positionFrame(positionFrame);
  builder_.add_anchorPointFrame(anchorPointFrame);
  builder_.add_eventFrame(eventFrame);
  builder_.add_rotationSkewFrame(rotationSkewFrame);
  builder_.add_zOrderFrame(zOrderFrame);
  builder_.add_visibleFrame(visibleFrame);
  return builder_.Finish();
}

struct TimeLineBoolFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  uint8_t value() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<uint8_t>(verifier, 8 /* value */) &&
           verifier.EndTable();
  }
};

struct TimeLineBoolFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(8, value, 0); }
  TimeLineBoolFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineBoolFrameBuilder &operator=(const TimeLineBoolFrameBuilder &);
  flatbuffers::Offset<TimeLineBoolFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLineBoolFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLineBoolFrame> CreateTimeLineBoolFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   uint8_t value = 0) {
  TimeLineBoolFrameBuilder builder_(_fbb);
  builder_.add_frameIndex(frameIndex);
  builder_.add_value(value);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct TimeLineIntFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  int32_t value() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<int32_t>(verifier, 8 /* value */) &&
           verifier.EndTable();
  }
};

struct TimeLineIntFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_value(int32_t value) { fbb_.AddElement<int32_t>(8, value, 0); }
  TimeLineIntFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineIntFrameBuilder &operator=(const TimeLineIntFrameBuilder &);
  flatbuffers::Offset<TimeLineIntFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLineIntFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLineIntFrame> CreateTimeLineIntFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   int32_t value = 0) {
  TimeLineIntFrameBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_frameIndex(frameIndex);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct TimeLineStringFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TimeLineStringFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(8, value); }
  TimeLineStringFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineStringFrameBuilder &operator=(const TimeLineStringFrameBuilder &);
  flatbuffers::Offset<TimeLineStringFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLineStringFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLineStringFrame> CreateTimeLineStringFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  TimeLineStringFrameBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_frameIndex(frameIndex);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct TimeLinePointFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  const Position *postion() const { return GetStruct<const Position *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<Position>(verifier, 8 /* postion */) &&
           verifier.EndTable();
  }
};

struct TimeLinePointFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_postion(const Position *postion) { fbb_.AddStruct(8, postion); }
  TimeLinePointFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLinePointFrameBuilder &operator=(const TimeLinePointFrameBuilder &);
  flatbuffers::Offset<TimeLinePointFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLinePointFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLinePointFrame> CreateTimeLinePointFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   const Position *postion = 0) {
  TimeLinePointFrameBuilder builder_(_fbb);
  builder_.add_postion(postion);
  builder_.add_frameIndex(frameIndex);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct TimeLineColorFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  const Color *color() const { return GetStruct<const Color *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<Color>(verifier, 8 /* color */) &&
           verifier.EndTable();
  }
};

struct TimeLineColorFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_color(const Color *color) { fbb_.AddStruct(8, color); }
  TimeLineColorFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineColorFrameBuilder &operator=(const TimeLineColorFrameBuilder &);
  flatbuffers::Offset<TimeLineColorFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLineColorFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLineColorFrame> CreateTimeLineColorFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   const Color *color = 0) {
  TimeLineColorFrameBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_frameIndex(frameIndex);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct TimeLineTextureFrame : private flatbuffers::Table {
  int32_t frameIndex() const { return GetField<int32_t>(4, 0); }
  uint8_t tween() const { return GetField<uint8_t>(6, 1); }
  const flatbuffers::String *path() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* frameIndex */) &&
           VerifyField<uint8_t>(verifier, 6 /* tween */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* path */) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
};

struct TimeLineTextureFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frameIndex(int32_t frameIndex) { fbb_.AddElement<int32_t>(4, frameIndex, 0); }
  void add_tween(uint8_t tween) { fbb_.AddElement<uint8_t>(6, tween, 1); }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) { fbb_.AddOffset(8, path); }
  TimeLineTextureFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimeLineTextureFrameBuilder &operator=(const TimeLineTextureFrameBuilder &);
  flatbuffers::Offset<TimeLineTextureFrame> Finish() {
    auto o = flatbuffers::Offset<TimeLineTextureFrame>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TimeLineTextureFrame> CreateTimeLineTextureFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t frameIndex = 0,
   uint8_t tween = 1,
   flatbuffers::Offset<flatbuffers::String> path = 0) {
  TimeLineTextureFrameBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_frameIndex(frameIndex);
  builder_.add_tween(tween);
  return builder_.Finish();
}

struct ResourceData : private flatbuffers::Table {
  const flatbuffers::String *path() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *plistFile() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t resourceType() const { return GetField<int32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* path */) &&
           verifier.Verify(path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* plistFile */) &&
           verifier.Verify(plistFile()) &&
           VerifyField<int32_t>(verifier, 8 /* resourceType */) &&
           verifier.EndTable();
  }
};

struct ResourceDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) { fbb_.AddOffset(4, path); }
  void add_plistFile(flatbuffers::Offset<flatbuffers::String> plistFile) { fbb_.AddOffset(6, plistFile); }
  void add_resourceType(int32_t resourceType) { fbb_.AddElement<int32_t>(8, resourceType, 0); }
  ResourceDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResourceDataBuilder &operator=(const ResourceDataBuilder &);
  flatbuffers::Offset<ResourceData> Finish() {
    auto o = flatbuffers::Offset<ResourceData>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ResourceData> CreateResourceData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> path = 0,
   flatbuffers::Offset<flatbuffers::String> plistFile = 0,
   int32_t resourceType = 0) {
  ResourceDataBuilder builder_(_fbb);
  builder_.add_resourceType(resourceType);
  builder_.add_plistFile(plistFile);
  builder_.add_path(path);
  return builder_.Finish();
}

inline const CSParseBinary *GetCSParseBinary(const void *buf) { return flatbuffers::GetRoot<CSParseBinary>(buf); }

inline bool VerifyCSParseBinaryBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<CSParseBinary>(); }

inline void FinishCSParseBinaryBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<CSParseBinary> root) { fbb.Finish(root); }

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_CSPARSEBINARY_FLATBUFFERS_H_
